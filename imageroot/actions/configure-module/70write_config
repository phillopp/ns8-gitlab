#!/usr/bin/env python3

#
# Copyright (C) 2024 Philip Falliano
# SPDX-License-Identifier: GPL-3.0-or-later
#

# Configure ldap 

import sys
import os
import agent
from agent.ldapproxy import Ldapproxy

def dict_to_gitlab_rb(config, indent=0):
    lines = []
    indent_space = '  ' * indent

    for key, value in config.items():
        if isinstance(value, dict):
            if indent == 0:
                lines.append(f"{indent_space}gitlab_rails['{key}'] = {{")
            else:
                lines.append(f"{indent_space}'{key}' => {{")
            lines.extend(dict_to_gitlab_rb(value, indent + 1))
            lines.append(f"{indent_space}}}")
        elif isinstance(value, bool):
            lines.append(f"{indent_space}'{key}' => {str(value).lower()},")
        elif isinstance(value, str):
            lines.append(f"{indent_space}'{key}' => '{value}',")
        elif indent == 0:
            lines.append(f"{indent_space}gitlab_rails['{key}'] = {value}")
        else:
            lines.append(f"{indent_space}'{key}' => {value},")

    return lines

# System
rdb = agent.redis_connect(host='127.0.0.1')
smtp_settings = agent.get_smarthost_settings(rdb)

# Variables
host = os.environ.get('HOST')
registry_url = os.environ.get('GITLAB_REGISTRY_HOST')
ldap_domain = os.environ.get('LDAP_DOMAIN','')

gitlab_conf = []
#gitlab_conf.append(f"external_url {host}")
gitlab_config = {}

# Gitlab URL / Nginx Config
gitlab_conf.append(f"external_url 'https://{host}'")
gitlab_conf.append("nginx['listen_https'] = false")
gitlab_conf.append("nginx['listen_port'] = 80")
gitlab_conf.append("nginx['proxy_set_headers'] = {")
gitlab_conf.append('  "X-Forwarded-Proto" => "https",')
gitlab_conf.append('  "X-Forwarded-Ssl" => "on"')
gitlab_conf.append("}")

if registry_url:
    # Registry URL / Nginx Config
    gitlab_conf.append(f"registry_external_url 'https://{registry_url}'")
    gitlab_conf.append("registry_nginx['listen_https'] = false")
    gitlab_conf.append("registry_nginx['listen_port'] = 5050")
    gitlab_conf.append("registry_nginx['proxy_set_headers'] = {")
    gitlab_conf.append('  "X-Forwarded-Proto" => "https",')
    gitlab_conf.append('  "X-Forwarded-Ssl" => "on"')
    gitlab_conf.append("}")

if ldap_domain:

    try:
        odom = Ldapproxy().get_domain(ldap_domain)
        'host' in odom # Throw exception if odom is None
    except:
        # During restore the domain could be unavailable. Use a fallback
        # configuration, pointing to nowhere, just to set the variables.
        # Once the domain becomes available, the event will fix them.
        sys.exit(2)
    
    gitlab_conf.append(f"gitlab_rails['ldap_enabled'] = true")

    uid = 'uid'
    ad = False
    if odom['schema'] == 'ad':
        uid = "sAMAccountName"
        ad = True
    else:
        uid = 'uid'
        ad = False

    gitlab_config['ldap_servers'] = {
        'main': {
            'label': 'LDAP',
            'host': '10.0.2.2', # special podman IP
            'bind_dn': odom['bind_dn'],
            'password': odom['bind_password'],
            'uid': uid,
            'active_directory': ad,
            'port': odom['port'],
            'base': odom['base_dn'],
            'block_auto_created_users': False,
            'encryption': 'plain',
            'verify_certificates': False,
            'block_auto_created_user': False
        }
    }

# Mail Setting

gitlab_conf.append("gitlab_rails['smtp_enable'] = true")
gitlab_conf.append(f"gitlab_rails['smtp_address'] = {smtp_settings['host']}")
gitlab_conf.append(f"gitlab_rails['smtp_port'] = {smtp_settings['port']}")
gitlab_conf.append(f"gitlab_rails['smtp_port'] = {smtp_settings['port']}")
gitlab_conf.append(f"gitlab_rails['smtp_tls'] = {smtp_settings['tls_verify']}")

if smtp_settings['password'] != 'none':
    gitlab_conf.append(f"gitlab_rails['smtp_authentication'] = {smtp_settings['encrypt_smtp']}")
if smtp_settings['username'] and smtp_settings['password']:
    gitlab_conf.append(f"gitlab_rails['smtp_password'] = {smtp_settings['password']}")
    gitlab_conf.append(f"gitlab_rails['smtp_username'] = {smtp_settings['username']}")
    gitlab_conf.append('gitlab_rails[\'smtp_authentication\'] = "login"')

# Write file

file_path = 'gitlab.rb'
payload = gitlab_conf + dict_to_gitlab_rb(gitlab_config)

tmpfile = ".{0}-{1!s}.tmp".format(os.path.basename(file_path), os.getpid())

bdir = os.path.dirname(file_path) # Base directory
if bdir:
    tmpfile = bdir + '/' + tmpfile # Prepend the base directory

with open(tmpfile, 'w') as ofile:
    for line in payload:
        ofile.write(f"{line}\n")
os.rename(tmpfile, file_path)
